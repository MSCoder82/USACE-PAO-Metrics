-- Social media workspace tables and policies
-- Run this script in your Supabase project to enable persistence for the
-- Social Media view that captures manual activity and feed connection metadata.

create table if not exists public.social_media_entries (
  id bigint generated by default as identity primary key,
  team_id bigint not null references public.teams (id) on delete cascade,
  user_id uuid not null references auth.users (id) on delete cascade,
  network text not null,
  title text not null,
  url text not null,
  placement text,
  notes text,
  created_at timestamptz not null default timezone('utc', now())
);

alter table public.social_media_entries
  add constraint social_media_entries_network_check
  check (network in ('Facebook', 'Twitter', 'Instagram', 'LinkedIn', 'YouTube', 'Other'));

create index if not exists social_media_entries_team_created_at_idx
  on public.social_media_entries (team_id, created_at desc);

create table if not exists public.social_media_connections (
  id bigint generated by default as identity primary key,
  team_id bigint not null references public.teams (id) on delete cascade,
  network text not null,
  connected boolean not null default false,
  auto_sync_cadence text not null default 'Manual',
  last_synced timestamptz,
  updated_by uuid references auth.users (id) on delete set null,
  updated_at timestamptz not null default timezone('utc', now()),
  unique (team_id, network)
);

alter table public.social_media_connections
  add constraint social_media_connections_network_check
  check (network in ('Facebook', 'Twitter', 'Instagram', 'LinkedIn', 'YouTube', 'Other'));

alter table public.social_media_connections
  add constraint social_media_connections_cadence_check
  check (auto_sync_cadence in ('Manual', 'Daily', 'Weekly'));

create index if not exists social_media_connections_team_idx
  on public.social_media_connections (team_id);

-- Ensure team_id is populated from the user's profile when omitted.
create or replace function public.populate_team_id_from_profile()
returns trigger
language plpgsql
security definer
set search_path = public
as $$
begin
  if new.team_id is null then
    select team_id
      into new.team_id
      from public.profiles
     where id = coalesce(new.user_id, new.updated_by, auth.uid());
  end if;

  if new.team_id is null then
    raise exception 'Team assignment is required for social media records.';
  end if;

  return new;
end;
$$;

create trigger set_team_id_on_social_media_entries
  before insert on public.social_media_entries
  for each row
  execute function public.populate_team_id_from_profile();

create trigger set_team_id_on_social_media_connections
  before insert on public.social_media_connections
  for each row
  execute function public.populate_team_id_from_profile();

-- Row level security policies
alter table public.social_media_entries enable row level security;
alter table public.social_media_connections enable row level security;

create policy "Team members can view social media entries"
  on public.social_media_entries
  for select
  using (
    exists (
      select 1
        from public.profiles p
       where p.id = auth.uid()
         and p.team_id = social_media_entries.team_id
    )
  );

create policy "Team members can insert social media entries"
  on public.social_media_entries
  for insert
  with check (
    exists (
      select 1
        from public.profiles p
       where p.id = auth.uid()
         and p.team_id = social_media_entries.team_id
    )
  );

create policy "Team members can delete social media entries"
  on public.social_media_entries
  for delete
  using (
    exists (
      select 1
        from public.profiles p
       where p.id = auth.uid()
         and p.team_id = social_media_entries.team_id
    )
  );

create policy "Team members can update their social media entries"
  on public.social_media_entries
  for update
  using (
    auth.uid() = social_media_entries.user_id
  )
  with check (
    auth.uid() = social_media_entries.user_id
  );

create policy "Team members can view feed connections"
  on public.social_media_connections
  for select
  using (
    exists (
      select 1
        from public.profiles p
       where p.id = auth.uid()
         and p.team_id = social_media_connections.team_id
    )
  );

create policy "Chiefs manage feed connections"
  on public.social_media_connections
  for all
  using (
    exists (
      select 1
        from public.profiles p
       where p.id = auth.uid()
         and p.team_id = social_media_connections.team_id
         and p.role = 'chief'
    )
  )
  with check (
    exists (
      select 1
        from public.profiles p
       where p.id = auth.uid()
         and p.team_id = social_media_connections.team_id
         and p.role = 'chief'
    )
  );

-- Keep updated_at fresh on changes.
create or replace function public.touch_updated_at()
returns trigger
language plpgsql
security definer
set search_path = public
as $$
begin
  new.updated_at := timezone('utc', now());
  return new;
end;
$$;

create trigger touch_social_media_connections
  before update on public.social_media_connections
  for each row
  execute function public.touch_updated_at();
